// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TransportBot.Data;

#nullable disable

namespace TransportBot.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231020034701_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TransportBot.Entities.AddressEntity", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AddressId"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("AddressId"), 7L, null, null, null, null, null);

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Coordinates")
                        .HasColumnType("text");

                    b.Property<string>("GeoLink")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("AddressId");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("TransportBot.Entities.DriverEntity", b =>
                {
                    b.Property<int>("DriverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DriverId"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("DriverId"), 7L, null, null, null, null, null);

                    b.Property<int>("AddressId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("HiringDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<decimal>("SalaryMonth")
                        .HasColumnType("numeric");

                    b.Property<string>("TelegramNick")
                        .HasColumnType("text");

                    b.HasKey("DriverId");

                    b.HasIndex("AddressId");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("TransportBot.Entities.OrderEntity", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderId"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("OrderId"), 7L, null, null, null, null, null);

                    b.Property<int?>("ChildrenNumber")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("boolean");

                    b.Property<decimal>("OrderPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("PassengersNumber")
                        .HasColumnType("integer");

                    b.Property<int>("PaymentType")
                        .HasColumnType("integer");

                    b.Property<int>("TripId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("UserNotes")
                        .HasColumnType("text");

                    b.HasKey("OrderId");

                    b.HasIndex("TripId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("TransportBot.Entities.TransportEntity", b =>
                {
                    b.Property<int>("TransportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TransportId"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("TransportId"), 7L, null, null, null, null, null);

                    b.Property<long?>("AverageFuelConsumption")
                        .HasColumnType("bigint");

                    b.Property<int?>("CurrentMileage")
                        .HasColumnType("integer");

                    b.Property<int>("InitialMileage")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastServiceDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NumberPlate")
                        .HasColumnType("text");

                    b.Property<int>("PassengersCapacity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("TransportId");

                    b.ToTable("Transports");
                });

            modelBuilder.Entity("TransportBot.Entities.TripEntity", b =>
                {
                    b.Property<int>("TripId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TripId"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("TripId"), 7L, null, null, null, null, null);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DepartureAddressId")
                        .HasColumnType("integer");

                    b.Property<int>("DestinationAddressId")
                        .HasColumnType("integer");

                    b.Property<int>("DriverId")
                        .HasColumnType("integer");

                    b.Property<int>("PassengersNumber")
                        .HasColumnType("integer");

                    b.Property<int>("TransportId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TripDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("TripProfit")
                        .HasColumnType("numeric");

                    b.Property<int>("TripType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("TripId");

                    b.HasIndex("DepartureAddressId");

                    b.HasIndex("DestinationAddressId");

                    b.HasIndex("DriverId");

                    b.HasIndex("TransportId");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("TransportBot.Entities.UserEntity", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("UserId"), 7L, null, null, null, null, null);

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("numeric");

                    b.Property<bool?>("IsSubscriptionActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastTrip")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int?>("SubscriptionTripsCount")
                        .HasColumnType("integer");

                    b.Property<int?>("SubscriptionType")
                        .HasColumnType("integer");

                    b.Property<string>("TelegramNick")
                        .HasColumnType("text");

                    b.Property<int>("TripsCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TransportBot.Entities.AddressEntity", b =>
                {
                    b.HasOne("TransportBot.Entities.UserEntity", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TransportBot.Entities.DriverEntity", b =>
                {
                    b.HasOne("TransportBot.Entities.AddressEntity", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("TransportBot.Entities.OrderEntity", b =>
                {
                    b.HasOne("TransportBot.Entities.TripEntity", "Trip")
                        .WithMany("Orders")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TransportBot.Entities.UserEntity", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trip");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TransportBot.Entities.TripEntity", b =>
                {
                    b.HasOne("TransportBot.Entities.AddressEntity", "DepartureAddress")
                        .WithMany()
                        .HasForeignKey("DepartureAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TransportBot.Entities.AddressEntity", "DestinationAddress")
                        .WithMany()
                        .HasForeignKey("DestinationAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TransportBot.Entities.DriverEntity", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TransportBot.Entities.TransportEntity", "Transport")
                        .WithMany()
                        .HasForeignKey("TransportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DepartureAddress");

                    b.Navigation("DestinationAddress");

                    b.Navigation("Driver");

                    b.Navigation("Transport");
                });

            modelBuilder.Entity("TransportBot.Entities.TripEntity", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("TransportBot.Entities.UserEntity", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
